---
"$schema": http://json-schema.org/draft-07/schema#
"$id": https://github.com/airbytehq/airbyte/blob/master/airbyte-protocol/models/src/main/resources/airbyte_protocol/v1/airbyte_protocol.yaml
title: AirbyteProtocol
type: object
description: AirbyteProtocol structs
version: 1.0.0
properties:
  airbyte_message:
    "$ref": "#/definitions/AirbyteMessage"
  configured_airbyte_catalog:
    "$ref": "#/definitions/ConfiguredAirbyteCatalog"
definitions:
  AirbyteMessage:
    type: object
    additionalProperties: true
    required:
      - type
    properties:
      type:
        description: "Message type"
        type: string
        enum:
          - RECORD
          - STATE
          - LOG
          - SPEC
          - CONNECTION_STATUS
          - CATALOG
          - TRACE
          - CONTROL
      log:
        description: "log message: any kind of logging you want the platform to know about."
        "$ref": "#/definitions/AirbyteLogMessage"
      spec:
        "$ref": "#/definitions/ConnectorSpecification"
      # todo (cgardens) - prefer snake case for field names.
      connectionStatus:
        "$ref": "#/definitions/AirbyteConnectionStatus"
      catalog:
        description: "catalog message: the catalog"
        "$ref": "#/definitions/AirbyteCatalog"
      record:
        description: "record message: the record"
        "$ref": "#/definitions/AirbyteRecordMessage"
      state:
        description: "schema message: the state. Must be the last message produced. The platform uses this information"
        "$ref": "#/definitions/AirbyteStateMessage"
      trace:
        description: "trace message: a message to communicate information about the status and performance of a connector"
        "$ref": "#/definitions/AirbyteTraceMessage"
      control:
        description: "connector config message: a message to communicate an updated configuration from a connector that should be persisted"
        "$ref": "#/definitions/AirbyteControlMessage"
  AirbyteRecordMessage:
    type: object
    additionalProperties: true
    required:
      - stream
      - data
      - emitted_at
    properties:
      namespace:
        description: "namespace the data is associated with"
        type: string
      stream:
        description: "stream the data is associated with"
        type: string
      data:
        description: "record data"
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      emitted_at:
        description: "when the data was emitted from the source. epoch in millisecond."
        type: integer
      meta:
        description: Information about this record added mid-sync
        "$ref": "#/definitions/AirbyteRecordMessageMeta"
  AirbyteRecordMessageMeta:
    type: object
    additionalProperties: true
    properties:
      changes:
        description: Lists of changes to the content of this record which occurred during syncing
        type: array
        items:
          "$ref": "#/definitions/AirbyteRecordMessageMetaChange"
  AirbyteRecordMessageMetaChange:
    type: object
    additionalProperties: true
    required:
      - field
      - reason
      - change
    properties:
      field:
        type: string
        description: The field that had the change occur (required)
      change:
        type: string
        description: The type of change that occurred
        enum:
          - NULLED
          - TRUNCATED
      reason:
        type: string
        description: The reason that the change occurred
        enum:
          # The record, in aggregate, was too large to be processed
          - SOURCE_RECORD_SIZE_LIMITATION
          - DESTINATION_RECORD_SIZE_LIMITATION
          - PLATFORM_RECORD_SIZE_LIMITATION
          # A single field, was too large to be processed
          - SOURCE_FIELD_SIZE_LIMITATION
          - DESTINATION_FIELD_SIZE_LIMITATION
          - PLATFORM_FIELD_SIZE_LIMITATION
          # The field could not be read or written
          - SOURCE_SERIALIZATION_ERROR
          - DESTINATION_SERIALIZATION_ERROR
          - PLATFORM_SERIALIZATION_ERROR
          # Errors producing the field
          - SOURCE_RETRIEVAL_ERROR
          # Errors casting to appropriate type
          - DESTINATION_TYPECAST_ERROR
  AirbyteStateMessage:
    type: object
    additionalProperties: true
    properties:
      type:
        "$ref": "#/definitions/AirbyteStateType"
      stream:
        "$ref": "#/definitions/AirbyteStreamState"
      global:
        "$ref": "#/definitions/AirbyteGlobalState"
      data:
        description: "(Deprecated) the state data"
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      sourceStats:
        "$ref": "#/definitions/AirbyteStateStats"
      destinationStats:
        "$ref": "#/definitions/AirbyteStateStats"
  AirbyteStateType:
    type: string
    description: >
      The type of state the other fields represent.
      Is set to LEGACY, the state data should be read from the `data` field for backwards compatibility.
      If not set, assume the state object is type LEGACY.
      GLOBAL means that the state should be read from `global` and means that it represents the state for all the streams. It contains one shared
      state and individual stream states.
      PER_STREAM means that the state should be read from `stream`. The state present in this field correspond to the isolated state of the
      associated stream description.
    enum:
      - GLOBAL
      - STREAM
      - LEGACY
  AirbyteStreamState:
    type: object
    additionalProperties: true
    required:
      - stream_descriptor
    properties:
      stream_descriptor:
        "$ref": "#/definitions/StreamDescriptor"
      stream_state:
        "$ref": "#/definitions/AirbyteStateBlob"
  AirbyteGlobalState:
    type: object
    additionalProperties: true
    required:
      - stream_states
    properties:
      shared_state:
        "$ref": "#/definitions/AirbyteStateBlob"
      stream_states:
        type: array
        items:
          "$ref": "#/definitions/AirbyteStreamState"
  StreamDescriptor:
    type: object
    additionalProperties: true
    required:
      - name
    properties:
      name:
        type: string
      namespace:
        type: string
  AirbyteStateBlob:
    type: object
    additionalProperties: true
    description: "the state data"
    existingJavaType: com.fasterxml.jackson.databind.JsonNode
  AirbyteStateStats:
    type: object
    additionalProperties: true
    properties:
      recordCount:
        description: "the number of records which were emitted for this state message, for this stream or global. While the value should always be a round number, it is defined as a double to account for integer overflows, and the value should always have a decimal point for proper serialization."
        type: number
  AirbyteLogMessage:
    type: object
    additionalProperties: true
    required:
      - level
      - message
    properties:
      level:
        description: "log level"
        type: string
        enum:
          - FATAL
          - ERROR
          - WARN
          - INFO
          - DEBUG
          - TRACE
      message:
        description: "log message"
        type: string
      stack_trace:
        description: "an optional stack trace if the log message corresponds to an exception"
        type: string
  AirbyteTraceMessage:
    type: object
    additionalProperties: true
    required:
      - type
      - emitted_at
    properties:
      type:
        title: "trace type" # this title is required to avoid python codegen conflicts with the "type" parameter in AirbyteMessage. See https://github.com/airbytehq/airbyte/pull/12581
        description: "the type of trace message"
        type: string
        enum:
          - ERROR
          - ESTIMATE
          - STREAM_STATUS
          - ANALYTICS
      emitted_at:
        description: "the time in ms that the message was emitted"
        type: number
      error:
        description: "error trace message: the error object"
        "$ref": "#/definitions/AirbyteErrorTraceMessage"
      estimate:
        description: "Estimate trace message: a guess at how much data will be produced in this sync"
        "$ref": "#/definitions/AirbyteEstimateTraceMessage"
      stream_status:
        description: "Stream status trace message:  the current status of a stream within a source"
        "$ref": "#/definitions/AirbyteStreamStatusTraceMessage"
      analytics:
        "$ref": "#/definitions/AirbyteAnalyticsTraceMessage"
  AirbyteErrorTraceMessage:
    type: object
    additionalProperties: true
    required:
      - message
    properties:
      message:
        description: A user-friendly message that indicates the cause of the error
        type: string
      internal_message:
        description: The internal error that caused the failure
        type: string
      stack_trace:
        description: The full stack trace of the error
        type: string
      failure_type:
        description: The type of error
        type: string
        enum:
          - system_error
          - config_error
          - transient_error
      stream_descriptor:
        description: "The stream associated with the error, if known (optional)"
        "$ref": "#/definitions/StreamDescriptor"
  AirbyteEstimateTraceMessage:
    type: object
    additionalProperties: true
    required:
      - name
      - type
    properties:
      name:
        description: The name of the stream
        type: string
      type:
        title: "estimate type" # this title is required to avoid python codegen conflicts with the "type" parameter in AirbyteMessage. See https://github.com/airbytehq/airbyte/pull/12581
        description: >
          Estimates are either per-stream (STREAM) or for the entire sync (SYNC).
          STREAM is preferred, and requires the source to count how many records are about to be emitted per-stream (e.g. there will be 100 rows from this table emitted).
          For the rare source which cannot tell which stream a record belongs to before reading (e.g. CDC databases), SYNC estimates can be emitted.
          Sources should not emit both STREAM and SOURCE estimates within a sync.
        type: string
        enum:
          - STREAM
          - SYNC
      namespace:
        description: The namespace of the stream
        type: string
      row_estimate:
        description: The estimated number of rows to be emitted by this sync for this stream
        type: integer
      byte_estimate:
        description: The estimated number of bytes to be emitted by this sync for this stream
        type: integer
  AirbyteStreamStatus:
    type: string
    description: >
      The current status of a stream within the context of an executing synchronization job.
    enum:
      - STARTED # Stream has started executing, but no data read yet
      - RUNNING # Stream has read its first byte/message
      - COMPLETE # Stream has completed executing without interruption or error
      - INCOMPLETE # Stream has stopped due to an interruption or error
  AirbyteStreamStatusTraceMessage:
    type: object
    additionalProperties: true
    required:
      - stream_descriptor
      - status
    properties:
      stream_descriptor:
        description: "The stream associated with the status"
        "$ref": "#/definitions/StreamDescriptor"
      status:
        description: "The current status of the stream"
        "$ref": "#/definitions/AirbyteStreamStatus"
  AirbyteAnalyticsTraceMessage:
    type: object
    additionalProperties: true
    description:
      "A message to communicate usage information about the connector which is not captured by regular sync analytics because it's specific to the connector internals.

      This is useful to understand how the connector is used and how to improve it.
      Each message is an event with a type and an optional payload value (both of them being strings). The event types should not be dynamically generated but defined statically.
      The payload value is optional and can contain arbitrary strings.
      "
    examples:
      - type: "sql-source-used-cursor-count-indexed"
        value: "2"
      - type: "mongodb-cluster-version"
        value: "6.5"
    required:
      - type
    properties:
      type:
        description: "The event type - should be a static string. Keep in mind that all strings are shared across all connectors."
        type: string
      value:
        type: string
        description: "The value of the event - can be an arbitrary string. In case the value is numeric, it should be converted to a string. Casting for analytics purposes can happen in the warehouse."
  AirbyteControlMessage:
    type: object
    additionalProperties: true
    required:
      - type
      - emitted_at
    properties:
      type:
        title: orchestrator type
        description: "the type of orchestrator message"
        type: string
        enum:
          - CONNECTOR_CONFIG
      emitted_at:
        description: "the time in ms that the message was emitted"
        type: number
      connectorConfig:
        description: "connector config orchestrator message: the updated config for the platform to store for this connector"
        "$ref": "#/definitions/AirbyteControlConnectorConfigMessage"
  AirbyteControlConnectorConfigMessage:
    type: object
    additionalProperties: true
    required:
      - config
    properties:
      config:
        description: "the config items from this connector's spec to update"
        type: object
        additionalProperties: true
  AirbyteConnectionStatus:
    type: object
    description: Airbyte connection status
    additionalProperties: true
    required:
      - status
    properties:
      status:
        type: string
        enum:
          - SUCCEEDED
          - FAILED
      message:
        type: string
  AirbyteCatalog:
    type: object
    additionalProperties: true
    description: Airbyte stream schema catalog
    required:
      - streams
    properties:
      streams:
        type: array
        items:
          "$ref": "#/definitions/AirbyteStream"
  AirbyteStream:
    type: object
    additionalProperties: true
    required:
      - name
      - json_schema
      - supported_sync_modes
    properties:
      name:
        type: string
        description: Stream's name.
      json_schema:
        description: Stream schema using Json Schema specs.
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      supported_sync_modes:
        description: List of sync modes supported by this stream.
        type: array
        minItems: 1
        items:
          "$ref": "#/definitions/SyncMode"
      source_defined_cursor:
        description: If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
        type: boolean
      default_cursor_field:
        description: Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
        type: array
        items:
          type: string
      source_defined_primary_key:
        description: If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
        type: array
        items:
          type: array
          items:
            type: string
      namespace:
        description: Optional Source-defined namespace. Currently only used by JDBC destinations to determine what schema to write to. Airbyte streams from the same sources should have the same namespace.
        type: string
  ConfiguredAirbyteCatalog:
    type: object
    additionalProperties: true
    description: Airbyte stream schema catalog
    required:
      - streams
    properties:
      streams:
        type: array
        items:
          "$ref": "#/definitions/ConfiguredAirbyteStream"
  ConfiguredAirbyteStream:
    type: object
    additionalProperties: true
    required:
      - stream
      - sync_mode
      - destination_sync_mode
    properties:
      stream:
        "$ref": "#/definitions/AirbyteStream"
      sync_mode:
        "$ref": "#/definitions/SyncMode"
        default: full_refresh
      cursor_field:
        description: Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
        type: array
        items:
          type: string
      destination_sync_mode:
        "$ref": "#/definitions/DestinationSyncMode"
        default: append
      primary_key:
        description: Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
        type: array
        items:
          type: array
          items:
            type: string
      generation_id:
        description: 
          "Monotically increasing numeric id representing the current generation of a stream. This id can be shared across syncs.

          If this is null, it means that the platform is not supporting the refresh and it is expected that no extra id will be added to the records and no data from previous generation will be cleanup.
          "
        type: integer
      minimum_generation_id:
        description: 
          "The minimum generation id which is needed in a stream. If it is present, the destination will try to delete the data that are part of a generation lower than this property.
          If the minimum generation is equals to 0, no data deletion is expected from the destiantion

          If this is null, it means that the platform is not supporting the refresh and it is expected that no extra id will be added to the records and no data from previous generation will be cleanup.
          "
        type: integer
      sync_id:
        description: 
          "Monotically increasing numeric id representing the current sync id. This is aimed to be unique per sync.

          If this is null, it means that the platform is not supporting the refresh and it is expected that no extra id will be added to the records and no data from previous generation will be cleanup.
          "
        type: integer
  SyncMode:
    type: string
    enum:
      - full_refresh
      - incremental
  DestinationSyncMode:
    type: string
    enum:
      - append
      - overwrite
      #- upsert_dedup # TODO chris: SCD Type 1 can be implemented later
      - append_dedup # SCD Type 1 & 2
  ConnectorSpecification:
    type: object
    additionalProperties: true
    description: Specification of a connector (source/destination)
    required:
      - connectionSpecification
    properties:
      # todo - split ConnectorSpecification into general vs connector type sections of properties
      # General Properties (Common to all connectors)
      # todo (cgardens) - prefer snake case for field names.
      documentationUrl:
        type: string
        format: uri
      # todo (cgardens) - prefer snake case for field names.
      changelogUrl:
        type: string
        format: uri
      # todo (cgardens) - prefer snake case for field names.
      connectionSpecification:
        description: ConnectorDefinition specific blob. Must be a valid JSON string.
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      # Connector Type Properties (Common to all connectors from same type)
      # Source Connectors Properties
      supportsIncremental:
        description: (deprecated) If the connector supports incremental mode or not.
        type: boolean
      # Destination Connectors Properties
      # Normalization is currently implemented using dbt, so it requires `supportsDBT` to be true for this to be true.
      supportsNormalization:
        description: If the connector supports normalization or not.
        type: boolean
        default: false
      supportsDBT:
        description: If the connector supports DBT or not.
        type: boolean
        default: false
      supported_destination_sync_modes:
        description: List of destination sync modes supported by the connector
        type: array
        items:
          "$ref": "#/definitions/DestinationSyncMode"
      advanced_auth:
        description: |-
          Additional and optional specification object to describe what an 'advanced' Auth flow would need to function.
            - A connector should be able to fully function with the configuration as described by the ConnectorSpecification in a 'basic' mode.
            - The 'advanced' mode provides easier UX for the user with UI improvements and automations. However, this requires further setup on the
            server side by instance or workspace admins beforehand. The trade-off is that the user does not have to provide as many technical
            inputs anymore and the auth process is faster and easier to complete.
        type: object
        properties:
          auth_flow_type:
            type: string
            enum: ["oauth2.0", "oauth1.0"] # Future auth types should be added here
          predicate_key:
            description: Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
            type: array
            items:
              type: string
          predicate_value:
            description: Value of the predicate_key fields for the advanced auth to be applicable.
            type: string
          oauth_config_specification:
            "$ref": "#/definitions/OAuthConfigSpecification"
      protocol_version:
        description: "the Airbyte Protocol version supported by the connector. Protocol versioning uses SemVer. "
        type: string
  OAuthConfigSpecification:
    type: object
    additionalProperties: true
    properties:
      oauth_user_input_from_connector_config_specification:
        description: |-
          OAuth specific blob. This is a Json Schema used to validate Json configurations used as input to OAuth.
          Must be a valid non-nested JSON that refers to properties from ConnectorSpecification.connectionSpecification
          using special annotation 'path_in_connector_config'.
          These are input values the user is entering through the UI to authenticate to the connector, that might also shared
          as inputs for syncing data via the connector.

          Examples:

          if no connector values is shared during oauth flow, oauth_user_input_from_connector_config_specification=[]
          if connector values such as 'app_id' inside the top level are used to generate the API url for the oauth flow,
            oauth_user_input_from_connector_config_specification={
              app_id: {
                type: string
                path_in_connector_config: ['app_id']
              }
            }
          if connector values such as 'info.app_id' nested inside another object are used to generate the API url for the oauth flow,
            oauth_user_input_from_connector_config_specification={
              app_id: {
                type: string
                path_in_connector_config: ['info', 'app_id']
              }
            }
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      complete_oauth_output_specification:
        description: |-
          OAuth specific blob. This is a Json Schema used to validate Json configurations produced by the OAuth flows as they are
          returned by the distant OAuth APIs.
          Must be a valid JSON describing the fields to merge back to `ConnectorSpecification.connectionSpecification`.
          For each field, a special annotation `path_in_connector_config` can be specified to determine where to merge it,

          Examples:

              complete_oauth_output_specification={
                refresh_token: {
                  type: string,
                  path_in_connector_config: ['credentials', 'refresh_token']
                }
              }
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      complete_oauth_server_input_specification:
        description: |-
          OAuth specific blob. This is a Json Schema used to validate Json configurations persisted as Airbyte Server configurations.
          Must be a valid non-nested JSON describing additional fields configured by the Airbyte Instance or Workspace Admins to be used by the
          server when completing an OAuth flow (typically exchanging an auth code for refresh token).

          Examples:

              complete_oauth_server_input_specification={
                client_id: {
                  type: string
                },
                client_secret: {
                  type: string
                }
              }
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
      complete_oauth_server_output_specification:
        description: |-
          OAuth specific blob. This is a Json Schema used to validate Json configurations persisted as Airbyte Server configurations that
          also need to be merged back into the connector configuration at runtime.
          This is a subset configuration of `complete_oauth_server_input_specification` that filters fields out to retain only the ones that
          are necessary for the connector to function with OAuth. (some fields could be used during oauth flows but not needed afterwards, therefore
          they would be listed in the `complete_oauth_server_input_specification` but not `complete_oauth_server_output_specification`)
          Must be a valid non-nested JSON describing additional fields configured by the Airbyte Instance or Workspace Admins to be used by the
          connector when using OAuth flow APIs.
          These fields are to be merged back to `ConnectorSpecification.connectionSpecification`.
          For each field, a special annotation `path_in_connector_config` can be specified to determine where to merge it,

          Examples:

                complete_oauth_server_output_specification={
                  client_id: {
                    type: string,
                    path_in_connector_config: ['credentials', 'client_id']
                  },
                  client_secret: {
                    type: string,
                    path_in_connector_config: ['credentials', 'client_secret']
                  }
                }
        type: object
        existingJavaType: com.fasterxml.jackson.databind.JsonNode
